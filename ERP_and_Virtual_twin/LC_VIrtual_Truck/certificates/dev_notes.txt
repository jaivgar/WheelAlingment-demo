How to create Arrowhead-compliant certificates

0. Take the certificate keystore that is wished to be used as the signer

1. Open it in KeyStore Explorer (http://keystore-explorer.org/downloads.html)
  - default KeyStore and Key pwd-s for all test certificates: '12345'

2. Right click on the certificate itself --> Sign / Sign New Key Pair

3. Edit settings for the new certificate:
  - validity period: e.g. set to 10 years
  - Name --> There is a book icon with '@': set CN fields
    CN: <systemName>.<cloudName>.<operator>.arrowhead.eu format
    Other fields can be filled out arbitrarily.

4. Move the newly created certificate to a new tab within the app
  - drag & drop works
  - it creates a new jks file for it
  - 'Save as' this new keystore as a '.jks' file

5. Tools --> Set Keystore Password

6. Right click on the certificate --> Set Password
  - the 'old' password is empty
  - give a new password to the certificate itself

7. Tools --> Set Keystore Type --> JKS
  - this changes from 'p12' filetype to Java Keystore format

8. Save the keystore again (File --> Save or CTRL+S)

+1. Don't forget to delete the new certificate from the old one's keystore!

---------------------------------------------------------------------------
How to extract crt and key files from jks files: (run as sudo/administrator)

1. Get the alias from .jks file
keytool -v -list -keystore <FileName>.jks

2. Export the .der file
keytool -export -alias "alias with the () part included" -file sample.der -keystore my.jks

3.Convert the .der file to unencrypted PEM (crt file)
openssl x509 -inform der -in sample.der -out sample.crt

4.Export the .p12 file
keytool -importkeystore -srckeystore my.jks -destkeystore keystore.p12 -deststoretype PKCS12 -destkeypass pass

5.Convert the .p12 file to unencrypted PEM (key file)
openssl pkcs12 -in keystore.p12 -nodes -nocerts -out server.key
 
---------------------------------------------------------------------------
How to export certificate public key in Base64 with the ArrowheadProvider client skeleton:
1. Edit the app.properties with the proper client and trust store keystores
2. Start the skeleton with "-tls" command line arguments.
3. The skeleton will print out the Base64 encoded string on the console during start. (This is the 2nd print, which starts as: "Server PublicKey Base64: ")

---------------------------------------------------------------------------
How to export certificate public key in Base64 for the database manually:
1. Open the jks in Keystore Explorer
2. Right click on certificate
3. Export -> Export Public Key
4. Remove --BEGIN-- and --END-- from .openssl file
5. Insert into Auth_info field in Arrowhead database
---------------------------------------------------------------------------

How to add our root certificate to the JDK
1. Go to the ~/jdk1.8.0_92/jre/bin
2. Copy the master_arrowhead_cert.crt here
3. Open a command line as administrator here
4. Type: keytool -import -alias "arrowhead.eu" -keystore "$JAVA_HOME/lib/security/cacerts" -file master_arrowhead_cert.crt
   (JAVA_HOME can be the JRE or JDK/jre/lib version of cacert, used truststore may depend on individual setup)
5. The default password is "changeit", then type "y" and hit enter. The certificate is added to the JDK truststore now.

How to delete an alias from java cacerts keystore
1. keytool -delete -alias "aliasname" -keystore "file_path_to_cacerts"
    - password: changeit